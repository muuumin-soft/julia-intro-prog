include("T行動内容.jl")
include("行動系統.jl")
include("Tキャラクター.jl")
include("ui_helper.jl")

struct 描画ツール
    画面更新
    現在表示行数加算
    ページサイズ
end

function create描画ツール()
    現在表示行数 = 0

    function 画面更新(表示文字列リスト)
        function 消去(行数)
            if 行数 == 0 
                return
            end
            
            print("\x1b[2K") #現在カーソルのある行の文字を消去
            for i in 1:行数+1 #+1はreadlineが作る改行を消すためのもの
                print("\x1b[1F") #カーソルを1行上の先頭に移動
                print("\x1b[2K") #現在カーソルのある行の文字を消去
            end
        end     

        消去(現在表示行数)
        表示文字列リスト = [表示文字列リスト;">>>"] #ユーザーにキー入力を促すための">>>"
        for 文字列 in 表示文字列リスト
            println(文字列)
        end
        現在表示行数 = length(表示文字列リスト)
        readline()
    end

    function 現在表示行数加算(行数)
        現在表示行数 += 行数
    end

    ページサイズ = 4
    return 描画ツール(画面更新, 現在表示行数加算, ページサイズ)
end

function コマンド選択(行動者::Tプレイヤー, プレイヤーs, モンスターs, 描画ツール)
    function get対象リスト(スキル::T行動内容)
        get対象リスト(行動系統(スキル))
    end

    function get対象リスト(::T攻撃系行動)
        return モンスターs
    end

    function get対象リスト(::T回復系行動)
        return プレイヤーs
    end

    function get対象リスト(::Tかばう行動)
        return filter(p -> p != 行動者 && isnothing(p.かばってくれているキャラクター), プレイヤーs)
    end

    function get対象リスト(::T刃に毒を塗る行動)
        return [行動者]
    end

    function 表示行数取得(選択肢)
        if length(選択肢) < 描画ツール.ページサイズ
            return length(選択肢)
        else
            return 描画ツール.ページサイズ
        end
    end

    function RadioMenu作成(選択肢)
        while true
            r = RadioMenu(選択肢, pagesize=描画ツール.ページサイズ)
            選択index = request("選択してください:", r)
            
            画面表示行数 = 表示行数取得(選択肢) + 1 #1は"選択してください:"の行
            描画ツール.現在表示行数加算(画面表示行数) #RadioMenuでの表示行数

            if 選択index == -1
                println("正しいコマンドを入力してください")
                描画ツール.現在表示行数加算(1) #"正しいコマンドを入力してください"を消すため
                continue
            else
                return 選択index
            end
        end
    end

    function 行動対象を選択し行動を決定(行動内容::T行動内容)
        対象リスト = get対象リスト(行動内容)
        if length(対象リスト) == 1
            return T行動(行動内容, 行動者, 対象リスト[1])
        else
            選択index = RadioMenu作成([s.名前 for s in 対象リスト])
            対象者 = 対象リスト[選択index]
            return T行動(行動内容, 行動者, 対象者)
        end
    end

    while true
        選択肢 = ["攻撃", "スキル"]
        選択index = RadioMenu作成(選択肢)
        選択 = 選択肢[選択index]
        if 選択 == "攻撃"
            return 行動対象を選択し行動を決定(T通常攻撃())
        elseif 選択 == "スキル"
            選択index = RadioMenu作成([s.名前 * string(s.消費MP) for s in 行動者.スキルs])
            選択スキル = 行動者.スキルs[選択index]
            if 行動者.MP < 選択スキル.消費MP 
                println("MPが足りません")
                continue
            end
            return 行動対象を選択し行動を決定(選択スキル)
        else
            throw(DomainError("行動選択でありえない選択肢が選ばれています"))
        end
    end 
end

function 戦況表示(プレイヤーs, モンスターs)
    function 表示(c::Tキャラクター)
        s = "$(c.名前) HP:$(c.HP) MP:$(c.MP)"

        状態異常s = c.状態異常s
        if length(状態異常s) > 0
            s *= " " * join(["$(j)" for j in 状態異常s], " ")
        end

        付与s = keys(c.物理攻撃時状態異常付与確率)
        if length(付与s) > 0
            s *= " " * join(["$(f)付与" for f in 付与s], " ")
        end
        return s
    end
    
    結果 = ["*****プレイヤー*****";
            [表示(p) for p in プレイヤーs];
            "*****モンスター*****";
            [表示(m) for m in モンスターs];
            "********************"]

    return 結果

end

function 攻撃実行ui処理!(攻撃者, コマンド::T通常攻撃, 描画ツール)
    表示文字列リスト = ["$(攻撃者.名前)の攻撃！"]
    描画ツール.画面更新(表示文字列リスト)
end

function 攻撃実行ui処理!(行動者, スキル::Tスキル, 描画ツール)
    スキル実行ui処理!(行動者, スキル, 描画ツール)
end

function 回復実行ui処理!(行動者, スキル::Tスキル, 描画ツール)
    スキル実行ui処理!(行動者, スキル, 描画ツール)
end

function スキル実行ui処理!(行動者, スキル::Tスキル, 描画ツール)
    表示文字列リスト = ["$(行動者.名前)の$(スキル.名前)！"]
    描画ツール.画面更新(表示文字列リスト)
end

function 状態異常付与ui処理!(対象者, 状態異常, 描画ツール)
    表示文字列リスト = ["$(対象者.名前)は$(状態異常)状態になった！"]
    描画ツール.画面更新(表示文字列リスト)
end

function かばう実行ui処理!(行動者, 対象者, 描画ツール)
    表示文字列リスト = ["$(行動者.名前)は$(対象者.名前)を身を呈して守る構えをとった！"]
    描画ツール.画面更新(表示文字列リスト)
end

function かばう発動ui処理!(防御者, 描画ツール)
    表示文字列リスト = ["$(防御者.かばってくれているキャラクター.名前)が代わりに攻撃を受ける！"]
    描画ツール.画面更新(表示文字列リスト)
end

function かばう解除ui処理_行動前処理!(行動者, 対象者, 描画ツール)
    表示文字列リスト = ["$(行動者.名前)は$(対象者.名前)をかばうのをやめた！"]
    描画ツール.画面更新(表示文字列リスト)
end

function かばう解除ui処理_戦闘不能!(行動者, 対象者, 描画ツール)
    表示文字列リスト = ["$(行動者.名前)は$(対象者.名前)をかばえなくなった！"]
    描画ツール.画面更新(表示文字列リスト)
end

function HP減少ui処理!(防御者, 防御者ダメージ, 描画ツール)
    表示文字列リスト = ["$(防御者.名前)は$(防御者ダメージ)のダメージを受けた！"
                    ,"$(防御者.名前)の残りHP：$(防御者.HP)"]
    描画ツール.画面更新(表示文字列リスト)
end

function HP回復ui処理!(対象者, 回復量, 描画ツール)
    表示文字列リスト = ["$(対象者.名前)のHPが$(回復量)回復した！"
                    ,"$(対象者.名前)の残りHP：$(対象者.HP)"]
    描画ツール.画面更新(表示文字列リスト)
end

function 攻撃失敗ui処理!(描画ツール)
    表示文字列リスト = ["攻撃は失敗した・・・"]
    描画ツール.画面更新(表示文字列リスト)
end

function 行動決定ui処理!(行動者::Tプレイヤー, プレイヤーs, モンスターs, 描画ツール)
    表示文字列リスト = [戦況表示(プレイヤーs, モンスターs)
                    ;"$(行動者.名前)のターン"]
    描画ツール.画面更新(表示文字列リスト)
end

function モンスター遭遇イベントui処理!(描画ツール)
    表示文字列リスト = ["モンスターに遭遇した！", "戦闘開始！"]
    描画ツール.画面更新(表示文字列リスト)
end

function 戦闘勝利イベントui処理!(描画ツール)
    表示文字列リスト = ["戦闘に勝利した！"]
    描画ツール.画面更新(表示文字列リスト)
end

function 戦闘敗北イベントui処理!(描画ツール)
    表示文字列リスト = ["戦闘に敗北した・・・"]
    描画ツール.画面更新(表示文字列リスト)
end

function 刃に毒を塗る実行ui処理!(対象者, 描画ツール)
    表示文字列リスト = ["$(対象者.名前)は刃に毒を塗った！"]
    描画ツール.画面更新(表示文字列リスト)
end

function 毒ダメージ発生ui処理!(対象者, 描画ツール)
    表示文字列リスト = ["$(対象者.名前)は毒に苦しんでいる！"]
    描画ツール.画面更新(表示文字列リスト)
end